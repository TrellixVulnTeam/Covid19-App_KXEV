{"ast":null,"code":"var _jsxFileName = \"/Users/daria/Desktop/ALL/Spring_2021/550/Project/CIS550-Final-Project/client/src/components/Map.js\";\nimport React, { Component } from 'react';\nimport { MapContainer, CircleMarker, TileLayer, Tooltip } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport '../style/Map.css';\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      countries: []\n    }; // this.submitDecadeGenre = this.submitDecadeGenre.bind(this);\n    // this.handleDecadeChange = this.handleDecadeChange.bind(this);\n    // this.handleGenreChange = this.handleGenreChange.bind(this);\n  }\n\n  /* ---- Q3a (Best Movies) ---- */\n  componentDidMount() {\n    fetch(\"http://localhost:8081/test\", {\n      method: 'GET' // The type of HTTP request.\n\n    }).then(res => {\n      // Convert the response data to a JSON.\n      // console.log(res.json());\n      return res.json();\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    }).then(casesList => {\n      if (!casesList) return;\n      const countriesDivs = casesList.map((casesObj, i) => /*#__PURE__*/React.createElement(CircleMarker, {\n        key: i,\n        center: [casesObj.latitude, casesObj.longitude] // radius={20 * Math.log(casesObj.Confirmed / 100000)}\n        ,\n        radius: casesObj.Confirmed / 500000,\n        fillOpacity: 0.5,\n        color: \"red\",\n        stroke: false,\n        name: casesObj.Country,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        direction: \"right\",\n        offset: [-8, -2],\n        opacity: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 5\n        }\n      }, casesObj.Country + \"\\n\" + \"Confirmed \\n\" + \": \" + casesObj.Confirmed), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 5\n        }\n      }, casesObj.Country + \"\\n\" + \"Confirmed \\n\" + \": \" + casesObj.Confirmed)))); // Set the state of the keywords list to the value returned by the HTTP response from the server.\n\n      this.setState({\n        countries: countriesDivs\n      });\n      console.log(this.state.countries[0]);\n    }, err => {\n      // Print the error if there is one.\n      console.log(err);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"myMap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MapContainer, {\n      style: {\n        height: \"480px\",\n        width: \"100%\",\n        backgroundColor: \"#f4913b\",\n        color: \"blue\"\n      },\n      zoom: 3,\n      center: [0, 0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TileLayer, {\n      url: \"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"movies-container\",\n      id: \"results\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }, this.state.countries)));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/daria/Desktop/ALL/Spring_2021/550/Project/CIS550-Final-Project/client/src/components/Map.js"],"names":["React","Component","MapContainer","CircleMarker","TileLayer","Tooltip","Map","constructor","props","state","countries","componentDidMount","fetch","method","then","res","json","err","console","log","casesList","countriesDivs","map","casesObj","i","latitude","longitude","Confirmed","Country","setState","render","height","width","backgroundColor","color"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport { MapContainer, CircleMarker, TileLayer,Tooltip } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport '../style/Map.css';\nclass Map extends Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tcountries: [],\n\t\t};\n\n\t\t// this.submitDecadeGenre = this.submitDecadeGenre.bind(this);\n\t\t// this.handleDecadeChange = this.handleDecadeChange.bind(this);\n\t\t// this.handleGenreChange = this.handleGenreChange.bind(this);\n\t};\n\n\t/* ---- Q3a (Best Movies) ---- */\n\tcomponentDidMount() {\n\t\n\t\tfetch(\"http://localhost:8081/test\",\n\t\t{\n\t\t  method: 'GET' // The type of HTTP request.\n\t\t}).then(res => {\n\t\t  // Convert the response data to a JSON.\n\t\t// console.log(res.json());\n          return res.json();\n\t\t}, err => {\n\t\t  // Print the error if there is one.\n\t\t  console.log(err);\n\t  }).then(casesList => {\n        if (!casesList) return;\n        const countriesDivs = casesList.map((casesObj, i) =>\n        <CircleMarker\n        key={i}\n        center={[casesObj.latitude, casesObj.longitude]}\n        // radius={20 * Math.log(casesObj.Confirmed / 100000)}\n        radius={casesObj.Confirmed / 500000}\n        fillOpacity={0.5}\n        color=\"red\"\n        stroke={false}\n        name={casesObj.Country}\n      >\n          <Tooltip direction=\"right\" offset={[-8, -2]} opacity={1}>\n    <span>{casesObj.Country + \"\\n\"\n     + \"Confirmed \\n\" + \": \" + casesObj.Confirmed}</span>\n    <span>{casesObj.Country + \"\\n\" + \"Confirmed \\n\" + \": \" + casesObj.Confirmed}</span>\n  </Tooltip>\n  </CircleMarker>\n      );\n\n      // Set the state of the keywords list to the value returned by the HTTP response from the server.\n      this.setState({\n        countries:countriesDivs\n      });\n      console.log(this.state.countries[0]);\n      }, err => {\n        // Print the error if there is one.\n        console.log(err);\n      });\n\n\t};\n  render() {\n    return (\n      <div id = \"myMap\">\n        <MapContainer\n          style={{ height: \"480px\", width: \"100%\", backgroundColor: \"#f4913b\",color:\"blue\" }}\n          zoom={3}\n          center={[0, 0]}>\n              <TileLayer url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\" />\n              <div className=\"movies-container\" id=\"results\">\n\t\t\t          {this.state.countries}\n\t\t\t        </div>\n        </MapContainer>\n      </div>\n    );\n  }\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}